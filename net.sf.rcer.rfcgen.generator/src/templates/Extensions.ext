/**
 * Copyright (c) 2009, 2010 The RCER Development Team.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html. If redistributing this code,
 * this entire header must remain intact.
 *
 * $Id$
 */
import mapping;

// --- model hopping ------------------------------------------------------------------------------

Structure getStructure(StructureMapping this) :
	(Structure)eContainer;
	
Model getModel(Structure this) :
	(Model)eContainer;
	
Model getModel(StructureMapping this) :
	getStructure().getModel();	

FunctionModule getFunctionModule(FunctionModuleMapping this) :
	(FunctionModule)eContainer;
	
Model getModel(FunctionModule this) :
	(Model)eContainer;
	
Model getModel(FunctionModuleMapping this) :
	getFunctionModule().getModel();	


// --- file names ---------------------------------------------------------------------------------

String getFileName(StructurePOJOMapping structure, String packageName):
	packageName.replaceAll("\\.", "/") + "/" + structure.name + ".java";
	
String getFileName(FunctionModulePOJOCallMapping mapping, String packageName):
	packageName.replaceAll("\\.", "/") + "/" + mapping.className + ".java";
	
String getRequestFileName(FunctionModulePOJORequestResponseMapping mapping, String packageName):
	packageName.replaceAll("\\.", "/") + "/" + mapping.requestClassName + ".java";
	
String getResponseFileName(FunctionModulePOJORequestResponseMapping mapping, String packageName):
	packageName.replaceAll("\\.", "/") + "/" + mapping.responseClassName + ".java";
	
// --- common mapping functions -------------------------------------------------------------------

/*
String getJavaType(FunctionModulePOJOParameterMapping parameter):
	"Object";
*/

// --- general data type mapping ------------------------------------------------------------------

String getJavaTypeName(DataType type):
	switch(type) {
		case DataType::BIG_DECIMAL : "BigDecimal"
		case DataType::BIG_INTEGER : "BigInteger" 
		case DataType::BOOLEAN     : "boolean"
		case DataType::BYTE        : "byte" 
		case DataType::BYTE_ARRAY  : "byte[]"
		case DataType::CHAR        : "char"
		case DataType::CHAR_ARRAY  : "char[]"
		case DataType::DATE        : "Date"       
		case DataType::DOUBLE      : "double"      
		case DataType::FLOAT       : "float"      
		case DataType::INTEGER     : "int"     
		case DataType::LONG        : "long"        
		case DataType::SHORT       : "short"       
		case DataType::STRING      : "String"      
		case DataType::TIME        : "Date"
		default                    : "Object"
	};

String getJCoGetterName(DataType type):
	switch(type) {
		case DataType::BIG_DECIMAL : "getBigDecimal"
		case DataType::BIG_INTEGER : "getBigInteger" 
		case DataType::BOOLEAN     : "getChar"
		case DataType::BYTE        : "getByte" 
		case DataType::BYTE_ARRAY  : "getByteArray"
		case DataType::CHAR        : "getChar"
		case DataType::CHAR_ARRAY  : "getCharArray"
		case DataType::DATE        : "getDate"       
		case DataType::DOUBLE      : "getDouble"      
		case DataType::FLOAT       : "getFloat"      
		case DataType::INTEGER     : "getInt"
		case DataType::LONG        : "getLong"        
		case DataType::SHORT       : "getShort"       
		case DataType::STRING      : "getString"      
		case DataType::TIME        : "getTime"
		default                    : "getValue"
	};

// --- structure mapping --------------------------------------------------------------------------

List[StructureFieldPOJOMapping] getActiveFields(StructurePOJOMapping mapping):
	mapping.fields.select(f|!f.inactive);

String getGetterName(StructureFieldPOJOMapping parameter):
	(parameter.type == DataType::BOOLEAN ? "is" : "get") + parameter.attribute.toFirstUpper();

String getSetterName(StructureFieldPOJOMapping parameter):
	"set" + parameter.attribute.toFirstUpper();

String getJavaTypeName(StructureFieldPOJOMapping parameter):
	parameter.type.getJavaTypeName();

String getJCoGetterName(StructureFieldPOJOMapping parameter):
	parameter.type.getJCoGetterName();

// --- common accessors for function module mapping -----------------------------------------------

boolean isBoolean(FunctionModulePOJOParameterMapping parameter):
	false;

boolean isBoolean(FunctionModulePOJOImportingParameter parameter):
	parameter.type == DataType::BOOLEAN;

boolean isBoolean(FunctionModulePOJOExportingParameter parameter):
	parameter.type == DataType::BOOLEAN;

boolean isBoolean(FunctionModulePOJOChangingParameter parameter):
	parameter.type == DataType::BOOLEAN;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

boolean isStructure(FunctionModulePOJOParameterMapping parameter):
	false;
	
boolean isStructure(FunctionModulePOJOImportingParameter parameter):
	parameter.structure;

boolean isStructure(FunctionModulePOJOExportingParameter parameter):
	parameter.structure;

boolean isStructure(FunctionModulePOJOChangingParameter parameter):
	parameter.structure;

boolean isStructure(FunctionModulePOJOTablesParameter parameter):
	false;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

boolean isTable(FunctionModulePOJOParameterMapping parameter):
	false;
	
boolean isTable(FunctionModulePOJOImportingParameter parameter):
	parameter.table;

boolean isTable(FunctionModulePOJOExportingParameter parameter):
	parameter.table;

boolean isTable(FunctionModulePOJOChangingParameter parameter):
	parameter.table;

boolean isTable(FunctionModulePOJOTablesParameter parameter):
	true;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

boolean isInput(FunctionModulePOJOParameterMapping parameter):
	false;
	
boolean isInput(FunctionModulePOJOImportingParameter parameter):
	true;

boolean isInput(FunctionModulePOJOExportingParameter parameter):
	false;

boolean isInput(FunctionModulePOJOChangingParameter parameter):
	true;

boolean isInput(FunctionModulePOJOTablesParameter parameter):
	true;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

boolean isOutput(FunctionModulePOJOParameterMapping parameter):
	false;
	
boolean isOutput(FunctionModulePOJOImportingParameter parameter):
	false;

boolean isOutput(FunctionModulePOJOExportingParameter parameter):
	true;

boolean isOutput(FunctionModulePOJOChangingParameter parameter):
	true;

boolean isOutput(FunctionModulePOJOTablesParameter parameter):
	true;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

String getJCoAccessor(FunctionModulePOJOParameterMapping parameter):
	"ERROR";
	
String getJCoAccessor(FunctionModulePOJOImportingParameter parameter):
	"getImportParameterList()";

String getJCoAccessor(FunctionModulePOJOExportingParameter parameter):
	"getExportParameterList()";

String getJCoAccessor(FunctionModulePOJOChangingParameter parameter):
	"getChangingParameterList()";

String getJCoAccessor(FunctionModulePOJOTablesParameter parameter):
	"getTableParameterList()";

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

String getElementTypeName(FunctionModulePOJOParameterMapping parameter):
	"Object";

String getElementTypeName(FunctionModulePOJOImportingParameter parameter):
	(parameter.external ? parameter.externalClass.fullName : 
		(parameter.structure ? ((StructurePOJOMapping)parameter.structureMapping).name
    	                         : parameter.type.getJavaTypeName() 
    	 )
   	);

String getElementTypeName(FunctionModulePOJOExportingParameter parameter):
	(parameter.external ? parameter.externalClass.fullName : 
		(parameter.structure ? ((StructurePOJOMapping)parameter.structureMapping).name
        	                     : parameter.type.getJavaTypeName() 
    	)
    );    	                     

String getElementTypeName(FunctionModulePOJOChangingParameter parameter):
	(parameter.external ? parameter.externalClass.fullName : 
		(parameter.structure ? ((StructurePOJOMapping)parameter.structureMapping).name
        	                     : parameter.type.getJavaTypeName() 
		)
	);                            

String getElementTypeName(FunctionModulePOJOTablesParameter parameter):
	(parameter.external ? parameter.externalClass.fullName : 
		((StructurePOJOMapping)parameter.structureMapping).name
	);

// --- function module mapping --------------------------------------------------------------------

List[FunctionModulePOJOParameterMapping] getActiveParameters(FunctionModulePOJOCallMapping mapping):
	mapping.parameters.select(p|!p.inactive);

List[FunctionModulePOJOParameterMapping] getActiveInputParameters(FunctionModulePOJOCallMapping mapping):
	mapping.parameters.select(p|!p.inactive).select(p|p.isInput());

List[FunctionModulePOJOParameterMapping] getActiveOutputParameters(FunctionModulePOJOCallMapping mapping):
	mapping.parameters.select(p|!p.inactive).select(p|p.isOutput());

List[FunctionModulePOJOParameterMapping] getActiveRequestParameters(FunctionModulePOJORequestResponseMapping mapping):
	mapping.requestParameters.select(p|!p.inactive);

List[FunctionModulePOJOParameterMapping] getActiveResponseParameters(FunctionModulePOJORequestResponseMapping mapping):
	mapping.responseParameters.select(p|!p.inactive);

String getGetterName(FunctionModulePOJOParameterMapping parameter):
	(parameter.isBoolean() ? "is" : "get") + parameter.attribute.toFirstUpper();

String getSetterName(FunctionModulePOJOParameterMapping parameter):
	"set" + parameter.attribute.toFirstUpper();

String getJavaTypeName(FunctionModulePOJOParameterMapping parameter):
 	(parameter.external ? parameter.externalClass.fullName : (
		(parameter.isTable() ? "List<" : "") + 
		parameter.getElementTypeName() +
		(parameter.isTable() ? ">" : "") 
	)); 

String getJCoGetterName(FunctionModulePOJOParameterMapping parameter):
	"getValue";
	
String getJCoGetterName(FunctionModulePOJOImportingParameter parameter):
	parameter.type.getJCoGetterName();

String getJCoGetterName(FunctionModulePOJOExportingParameter parameter):
	parameter.type.getJCoGetterName();

String getJCoGetterName(FunctionModulePOJOChangingParameter parameter):
	parameter.type.getJCoGetterName();

