«REM»
 *
 * Copyright (c) 2009, 2010 The RCER Development Team.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html. If redistributing this code,
 * this entire header must remain intact.
 *
 * $Id$
 *
«ENDREM»
«IMPORT mapping»
«EXTENSION templates::Extensions»

«REM» ============================================================================================= «ENDREM»

«DEFINE main FOR Model»
	«FOREACH structures AS s»
		«EXPAND StructureClass(packageName, s.name) FOR s.mapping»
	«ENDFOREACH»
	«FOREACH functionModules AS m»
		«EXPAND FunctionModuleClasses(packageName, m.name) FOR m.mapping»
	«ENDFOREACH»
«ENDDEFINE»

«REM» ============================================================================================= «ENDREM»

«DEFINE Imports FOR Model»
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;

import java.math.BigDecimal;
import java.math.BigInteger;

import java.text.MessageFormat;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.sap.conn.jco.JCoDestination;
import com.sap.conn.jco.JCoException;
import com.sap.conn.jco.JCoFunction;
import com.sap.conn.jco.JCoRecord;
import com.sap.conn.jco.JCoRecordMetaData;
import com.sap.conn.jco.JCoTable;

«FOREACH imports AS i-»
import «i.fullName»;
«ENDFOREACH-»
«ENDDEFINE»

«REM» ============================================================================================= «ENDREM»

«DEFINE PropertyChangeSupportMethods FOR Object-»
	/**
	 * @param listener
	 * @see java.beans.PropertyChangeSupport#addPropertyChangeListener(java.beans.PropertyChangeListener)
	 */
	public void addPropertyChangeListener(PropertyChangeListener listener) {
		_pcs.addPropertyChangeListener(listener);
	}

	/**
	 * @param propertyName
	 * @param listener
	 * @see java.beans.PropertyChangeSupport#addPropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener)
	 */
	public void addPropertyChangeListener(String propertyName, PropertyChangeListener listener) {
		_pcs.addPropertyChangeListener(propertyName, listener);
	}

	/**
	 * @return the list of property change listeners
	 * @see java.beans.PropertyChangeSupport#getPropertyChangeListeners()
	 */
	public PropertyChangeListener[] getPropertyChangeListeners() {
		return _pcs.getPropertyChangeListeners();
	}

	/**
	 * @param propertyName
	 * @return the list of property change listeners for a certain property
	 * @see java.beans.PropertyChangeSupport#getPropertyChangeListeners(java.lang.String)
	 */
	public PropertyChangeListener[] getPropertyChangeListeners(String propertyName) {
		return _pcs.getPropertyChangeListeners(propertyName);
	}

	/**
	 * @param propertyName
	 * @return <code>true</code> if any property change listeners are registered
	 * @see java.beans.PropertyChangeSupport#hasListeners(java.lang.String)
	 */
	public boolean hasListeners(String propertyName) {
		return _pcs.hasListeners(propertyName);
	}

	/**
	 * @param listener
	 * @see java.beans.PropertyChangeSupport#removePropertyChangeListener(java.beans.PropertyChangeListener)
	 */
	public void removePropertyChangeListener(PropertyChangeListener listener) {
		_pcs.removePropertyChangeListener(listener);
	}

	/**
	 * @param propertyName
	 * @param listener
	 * @see java.beans.PropertyChangeSupport#removePropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener)
	 */
	public void removePropertyChangeListener(String propertyName, PropertyChangeListener listener) {
		_pcs.removePropertyChangeListener(propertyName, listener);
	}
«ENDDEFINE»

«REM» ============================================================================================= «ENDREM»

«DEFINE StructureClass(String packageName, String functionModuleName) FOR StructureMapping»
«ERROR "Abstract template StructureClass for StructureMapping called - should not happen."»
«ENDDEFINE»

«REM» ============================================================================================= «ENDREM»

«DEFINE StructureClass(String packageName, String structureName) FOR StructurePOJOMapping»
«FILE getFileName(packageName)» 
package «packageName»;
«EXPAND Imports FOR getModel()»
/**
 * A class representing the SAP R/3 data structure «structureName».
 */
public class «name» {

	private PropertyChangeSupport _pcs;

«FOREACH getActiveFields() AS f-»
	private «f.getJavaTypeName()» «f.attribute»;
«ENDFOREACH-»
	
	/**
	 * Default constructor to create an instance with initial values.
	 */
	public «name»() {
		_pcs = new PropertyChangeSupport(this);
	}

	/**
	 * Copy constructor to create an instance and copy the values from an existing record.
	 * @param source the {@link JCoRecord} to copy the values from
	 * @throws UnsupportedOperationException if any other structure is passed as a source record
	 */
	public «name»(JCoRecord source) throws UnsupportedOperationException {
		checkStructure(source);
		_pcs = new PropertyChangeSupport(this);
«FOREACH getActiveFields() AS f-»
	«IF f.type == DataType::BOOLEAN-»
		this.«f.attribute» = source.getString("«f.name»").equalsIgnoreCase("X"); //$NON-NLS-1$ //$NON-NLS-2$
	«ELSE-»
		this.«f.attribute» = source.«f.getJCoGetterName()»("«f.name»"); //$NON-NLS-1$
	«ENDIF-»
«ENDFOREACH-»
	}

	/**
	 * Copy the values into a target record.
	 * @param targetStructure the {@link JCoRecord} to copy the values to
	 * @throws UnsupportedOperationException if any other structure is passed as a target record
	 */
	public void toStructure(JCoRecord targetStructure) throws UnsupportedOperationException {
		checkStructure(targetStructure);
	    // don't call clear in case of a table because that would delete all rows.
		if (!(targetStructure instanceof JCoTable)) {
			targetStructure.clear();
		}
«FOREACH getActiveFields() AS f-»
	«IF f.type == DataType::BOOLEAN-»
		targetStructure.setValue("«f.name»", this.«f.attribute» ? "X" : " "); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
	«ELSE-»
		targetStructure.setValue("«f.name»", this.«f.attribute»); //$NON-NLS-1$
	«ENDIF-»
«ENDFOREACH-»
	}

	/**
	 * Transfers the contents of a typed list to a {@link JCoTable}.
	 * @param source
	 * @param destination
	 */
	public static void toTable(List<«name»> source, JCoTable destination) {
		destination.deleteAllRows();
		for («name» entry: source) {
			destination.appendRow();
			entry.toStructure(destination);
		}
	}
	
	/**
	 * Transfers the contents of a {@link JCoTable} into a typed list.
	 * @param source the {@link JCoTable} to read the data from
	 * @return a new {@link List} instance containing the data from the table
	 */
	public static List<«name»> fromTable(JCoTable source) {
		List<«name»> list = new ArrayList<«name»>();
		if (!source.isEmpty()) {
			source.firstRow();
			do {
				list.add(new «name»(source));
			} while (source.nextRow());
		}
		return list;
	}
	
	/**
	 * @throws UnsupportedOperationException if any structure other than «structureName» is passed
	 */
	private void checkStructure(JCoRecord structure) throws UnsupportedOperationException {
		String structureName = structure.getMetaData().getName();
		// if a table type (TYPE t_foo) is used instead of a structure (LIKE foo), unwrap the type
		if (structure.getMetaData() instanceof JCoRecordMetaData) {
			final JCoRecordMetaData recordMetaData = (JCoRecordMetaData) structure.getMetaData();
			if (recordMetaData.getLineType() != null) {
				structureName = recordMetaData.getLineType();
			}
		}
		if (!structureName.equals("«structureName»")) { //$NON-NLS-1$
			throw new UnsupportedOperationException(
				MessageFormat.format("Unsupported structure {0} (expected «structureName»).", structureName));
		}
	}
	
«FOREACH getActiveFields() AS f-»
	/**
	 * @return the «f.comment == null ? f.attribute : f.comment» («structureName»-«f.name»)
	 */
	public «f.getJavaTypeName()» «f.getGetterName()»() {
		return this.«f.attribute»;
	}
	
	/**
	 * Changes the «f.comment == null ? f.attribute : f.comment» («structureName»-«f.name»).
	 * @param new«f.attribute.toFirstUpper()» the new «f.comment == null ? f.attribute : f.comment» to set
	 */
	public void «f.getSetterName()»(«f.getJavaTypeName()» new«f.attribute.toFirstUpper()») {
		_pcs.firePropertyChange("«f.attribute»", this.«f.attribute», new«f.attribute.toFirstUpper()»); //$NON-NLS-1$
		this.«f.attribute» = new«f.attribute.toFirstUpper()»;
	}
	
«ENDFOREACH-»
«EXPAND PropertyChangeSupportMethods FOR this»
}
«ENDFILE»
«ENDDEFINE»

«REM» ============================================================================================= «ENDREM»

«DEFINE FunctionModuleClasses(String packageName, String functionModuleName) FOR FunctionModuleMapping»
«ERROR "Abstract template FunctionModuleClasses for FunctionModuleMapping called - should not happen."»
«ENDDEFINE»

«REM» ============================================================================================= «ENDREM»

«DEFINE FunctionModuleClasses(String packageName, String functionModuleName) FOR FunctionModulePOJOCallMapping»
«FILE getFileName(packageName)»
package «packageName»;
«EXPAND Imports FOR getModel()»
/**
 * A class to model a RFC call to «functionModuleName». Use the setters to prepare the importing parameters, 
 * then invoke {@link #execute(JCoDestination)} to execute the call. The attributes of this instance 
 * will be updated to reflect the data returned from the SAP R/3 system.
 * <blockquote><pre>
 * «className» call = new «className»();
 * call.setFoo(...);
 * call.execute(destination);
 * bar = call.getBar();
 * </pre></blockquote>
 */
public class «className» {

	private PropertyChangeSupport _pcs;

«FOREACH getActiveParameters() AS p-»
	«EXPAND FunctionModulePOJOParameterAttribute FOR p-»
«ENDFOREACH-»
	
	/**
	 * Default constructor to create an instance with initial values.
	 */
	public «className»() {
		_pcs = new PropertyChangeSupport(this);
	}

«FOREACH getActiveParameters() AS p-»
	«EXPAND FunctionModulePOJOParameterGetterSetter FOR p-»
«ENDFOREACH-»
	/**
	 * Executes the RFC call and updates the attributes accordingly.
	 * @param destination the RFC destination to use
	 * @throws JCoException
	 */
	public void execute(JCoDestination destination) throws JCoException {
		JCoFunction function = destination.getRepository().getFunction("«functionModuleName»"); //$NON-NLS-1$
		
		// disable the inactive parameters
«FOREACH parameters AS p-»
		function.«p.getJCoAccessor()».setActive("«p.name»", «!p.inactive»);
«ENDFOREACH-»

		// transfer the input parameters
«FOREACH getActiveInputParameters() AS p-»
	«EXPAND FunctionModulePOJOParameterBeforeCall FOR p-»
«ENDFOREACH-»

		// perform the RFC call
		function.execute(destination);
		
		// transfer the output parameters
«FOREACH getActiveOutputParameters() AS p-»
	«EXPAND FunctionModulePOJOParameterAfterCall FOR p-»
«ENDFOREACH-»
	}

«EXPAND PropertyChangeSupportMethods FOR this»
}
«ENDFILE»
«ENDDEFINE»

«REM» ============================================================================================= «ENDREM»

«DEFINE FunctionModuleClasses(String packageName, String functionModuleName) FOR FunctionModulePOJORequestResponseMapping»
«FILE getRequestFileName(packageName)» 
package «packageName»;
«EXPAND Imports FOR getModel()»
/**
 * A class to model the input data of a RFC call to «functionModuleName». Use the setters to prepare 
 * the importing parameters, then invoke {@link #execute(JCoDestination)} to execute the call. This method
 * returns an instance that contains the data returned from the SAP R/3 system.
 * <blockquote><pre>
 * «requestClassName» request = new «requestClassName»();
 * request.setFoo(...);
 * «responseClassName» response = call.execute(destination);
 * bar = response.getBar();
 * </pre></blockquote>
 */
public class «requestClassName» {

	private PropertyChangeSupport _pcs;

«FOREACH getActiveRequestParameters() AS p-»
	«EXPAND FunctionModulePOJOParameterAttribute FOR p-»
«ENDFOREACH-»
	
	/**
	 * Default constructor to create an instance with initial values.
	 */
	public «requestClassName»() {
		_pcs = new PropertyChangeSupport(this);
	}
	
«FOREACH getActiveRequestParameters() AS p-»
	«EXPAND FunctionModulePOJOParameterGetterSetter FOR p-»
«ENDFOREACH-»
	/**
	 * Executes the RFC call and returns the response instance.
	 * @param destination the RFC destination to use
	 * @return the instance of the response class
	 * @throws JCoException
	 */
	public «responseClassName» execute(JCoDestination destination) throws JCoException {
		JCoFunction function = destination.getRepository().getFunction("«functionModuleName»"); //$NON-NLS-1$

		// TODO enable disabling of parameters

		// transfer the input parameters
«FOREACH getActiveRequestParameters() AS p-»
	«EXPAND FunctionModulePOJOParameterBeforeCall FOR p-»
«ENDFOREACH-»

		// perform the RFC call
		function.execute(destination);

		// create the response object and transfer the output parameters
		«responseClassName» response = new «responseClassName»();
«FOREACH getActiveResponseParameters() AS p-»
	«EXPAND FunctionModulePOJOParameterAfterCallResponse FOR p-»
«ENDFOREACH-»
		return response;
	}

«EXPAND PropertyChangeSupportMethods FOR this»
}
«ENDFILE»

«REM» - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - «ENDREM»

«FILE getResponseFileName(packageName)» 
package «packageName»;
«EXPAND Imports FOR getModel()»
/**
 * A class to model the output data of a RFC call to «functionModuleName». See {@link «requestClassName»}
 * for instructions on how to obtain an instance of this class.
 * @see «requestClassName»
 */
public class «responseClassName» {

	private PropertyChangeSupport _pcs;

«FOREACH getActiveResponseParameters() AS p-»
	«EXPAND FunctionModulePOJOParameterAttribute FOR p-»
«ENDFOREACH-»
	
	/**
	 * Default constructor to create an instance with initial values.
	 */
	public «responseClassName»() {
		_pcs = new PropertyChangeSupport(this);
	}
	
«FOREACH getActiveResponseParameters() AS p-»
	«EXPAND FunctionModulePOJOParameterGetterSetter FOR p-»
«ENDFOREACH-»
«EXPAND PropertyChangeSupportMethods FOR this»
}
«ENDFILE»
«ENDDEFINE»

«REM» ============================================================================================= «ENDREM»

«DEFINE FunctionModulePOJOParameterAttribute FOR FunctionModulePOJOParameterMapping-»
«IF external-»
	private «externalClass.fullName» «attribute» = new «externalClass.fullName»();
«ELSEIF isTable()-»
	private «getJavaTypeName()» «attribute» = new ArrayList<«getElementTypeName()»>();
«ELSE-»
	private «getJavaTypeName()» «attribute»;
«ENDIF-»
«ENDDEFINE»

«REM» ============================================================================================= «ENDREM»

«DEFINE FunctionModulePOJOParameterGetterSetter FOR FunctionModulePOJOParameterMapping-»
	/**
	 * @return the «comment == null ? attribute : comment» («name»)
	 */
	public «getJavaTypeName()» «getGetterName()»() {
		return this.«attribute»;
	}
	
	/**
	 * Changes the «comment == null ? attribute : comment» («name»).
	 * @param new«attribute.toFirstUpper()» the new «comment == null ? attribute : comment» to set
	 */
	public void «getSetterName()»(«getJavaTypeName()» new«attribute.toFirstUpper()») {
		_pcs.firePropertyChange("«attribute»", this.«attribute», new«attribute.toFirstUpper()»); //$NON-NLS-1$
		this.«attribute» = new«attribute.toFirstUpper()»;
	}
	
«ENDDEFINE»


«REM» ============================================================================================= «ENDREM»

«DEFINE FunctionModulePOJOParameterBeforeCall FOR FunctionModulePOJOParameterMapping-»
«IF isTable()-»
		«getElementTypeName()».toTable(«attribute», function.«getJCoAccessor()».getTable("«name»")); //$NON-NLS-1$
«ELSEIF isStructure()-»
		«attribute».toStructure(function.«getJCoAccessor()».getStructure("«name»")); //$NON-NLS-1$
«ELSEIF isBoolean()-»
		function.«getJCoAccessor()».setValue("«name»", «attribute» ? "X" : " "); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
«ELSE-»
		function.«getJCoAccessor()».setValue("«name»", «attribute»); //$NON-NLS-1$
«ENDIF-»
«ENDDEFINE»

«REM» ============================================================================================= «ENDREM»

«DEFINE FunctionModulePOJOParameterAfterCall FOR FunctionModulePOJOParameterMapping-»
«IF isTable()-»
		«attribute» = «getElementTypeName()».fromTable(function.«getJCoAccessor()».getTable("«name»")); //$NON-NLS-1$
«ELSEIF isStructure()-»
		«attribute» = new «getJavaTypeName()»(function.«getJCoAccessor()».getStructure("«name»")); //$NON-NLS-1$
«ELSEIF isBoolean()-»
		«attribute» = function.«getJCoAccessor()».getString("«name»").equalsIgnoreCase("X"); //$NON-NLS-1$ //$NON-NLS-2$
«ELSE-»
		«attribute» = function.«getJCoAccessor()».«getJCoGetterName()»("«name»"); //$NON-NLS-1$
«ENDIF-»
«ENDDEFINE»

«REM» ============================================================================================= «ENDREM»

«DEFINE FunctionModulePOJOParameterAfterCallResponse FOR FunctionModulePOJOParameterMapping-»
«IF isTable()-»
		response.«getSetterName()»(«getElementTypeName()».fromTable(function.«getJCoAccessor()».getTable("«name»"))); //$NON-NLS-1$
«ELSEIF isStructure()-»
		response.«getSetterName()»(new «getJavaTypeName()»(function.«getJCoAccessor()».getStructure("«name»"))); //$NON-NLS-1$
«ELSEIF isBoolean()-»
		response.«getSetterName()»(function.«getJCoAccessor()».getString("«name»").equalsIgnoreCase("X")); //$NON-NLS-1$ //$NON-NLS-2$
«ELSE-»
		response.«getSetterName()»(function.«getJCoAccessor()».«getJCoGetterName()»("«name»")); //$NON-NLS-1$
«ENDIF-»
«ENDDEFINE»
