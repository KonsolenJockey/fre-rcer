module net.sf.rcer.rfcgen

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/net/sf/rcer/rfcgen/RFCMapping.xtext"
var file.extensions = "rfcgen"
var projectName = "net.sf.rcer.rfcgen.generator"
var runtimeProject = "../${projectName}"

Workflow {
	bean = StandaloneSetup {
		platformUri = "${runtimeProject}/.."
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}
	
//	component = Generator {
//		pathRtProject = runtimeProject
//		pathUiProject = "${runtimeProject}.ui"
//		projectNameRt = projectName
//		projectNameUi = "${projectName}.ui"
//		language = {
//			uri = grammarURI
//			fileExtensions = file.extensions
//
//			// Java API to access grammar elements (required by several other fragments)
//			fragment = grammarAccess.GrammarAccessFragment {}
//
//			// generates Java API for the generated EPackages 
//			fragment = ecore.EcoreGeneratorFragment {
//			// referencedGenModels = "uri to genmodel, uri to next genmodel"
//			}
//
//			// the serialization component
//			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}
//
//			// a custom ResourceFactory for use with EMF 
//			fragment = resourceFactory.ResourceFactoryFragment {
//				fileExtensions = file.extensions
//			}
//
//			// The antlr parser generator fragment.
//			fragment = parser.antlr.XtextAntlrGeneratorFragment {
//			//  options = {
//			//		backtrack = true
//			//	}
//			}
//
//			// java-based API for validation 
//			fragment = validation.JavaValidatorFragment {
//				composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
//				composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
//				// registerForImportedPackages = true
//			}
//
//			// scoping and exporting API
//			// fragment = scoping.ImportURIScopingFragment {}
//			// fragment = exporting.SimpleNamesFragment {}
//
//			// scoping and exporting API 
//			fragment = scoping.ImportNamespacesScopingFragment {}
//			fragment = exporting.QualifiedNamesFragment {}
//			fragment = builder.BuilderIntegrationFragment {}
//
//			// formatter API 
//			fragment = formatting.FormatterFragment {}
//
//			// labeling API 
//			fragment = labeling.LabelProviderFragment {}
//
//			// outline API 
//			fragment = outline.OutlineTreeProviderFragment {}
//			fragment = outline.QuickOutlineFragment {}
//
//			// quickfix API 
//			fragment = quickfix.QuickfixProviderFragment {}
//
//			// content assist API  
//			fragment = contentAssist.JavaBasedContentAssistFragment {}
//
//			// generates a more lightweight Antlr parser and lexer tailored for content assist  
//			fragment = parser.antlr.XtextAntlrUiGeneratorFragment {}
//
//			// project wizard (optional) 
//			fragment = projectWizard.SimpleProjectWizardFragment {
//					generatorProjectName = "${projectName}.generator" 
//					modelFileExtension = file.extensions
//			}
//			
//		}
//	}
}

//
//<workflow>
//	<property name="modelFile"/>
//	<property name="targetDir" value="src-gen"/>
//
//	<bean class="org.eclipse.emf.mwe.utils.StandaloneSetup" platformUri=".."/>
//	
//	<component class="org.eclipse.xtext.MweReader" uri="${modelFile}">
//		<!-- this class will be generated by the xtext generator -->
//		<register class="net.sf.rcer.rfcgen.RFCMappingStandaloneSetup"/>
//	</component>
//	
//	<component class="org.eclipse.xpand2.Generator">
//		<metaModel class="org.eclipse.xtend.typesystem.emf.EmfRegistryMetaModel"/>
//		<fileEncoding value="UTF-8"/>
//		<expand value="templates::Template::main FOR model"/>
//		<genPath value="${targetDir}"/>
//	</component>
//</workflow>
//<!-- TODO Migrate to MWE2 some day. -->
