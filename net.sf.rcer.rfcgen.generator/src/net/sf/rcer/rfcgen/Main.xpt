«REM»
 *
 * Copyright (c) 2008 The RCER Development Team.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html. If redistributing this code,
 * this entire header must remain intact.
 *
 * $Id$
 *
«ENDREM»
«IMPORT rfcgen»
«EXTENSION net::sf::rcer::rfcgen::utils»

«REM» ============================================================================================= «ENDREM»

«DEFINE main FOR GenSpec»
	«FOREACH structures AS s»
		«EXPAND StructureClass(packageName) FOR s»
	«ENDFOREACH»
	«FOREACH functionModules AS m»
		«EXPAND FunctionModuleClasses(packageName, m.name) FOR m.mapping»
	«ENDFOREACH»
«ENDDEFINE»

«REM» ============================================================================================= «ENDREM»

«DEFINE Imports FOR Object»
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;

import java.text.MessageFormat;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.sap.conn.jco.JCoDestination;
import com.sap.conn.jco.JCoException;
import com.sap.conn.jco.JCoFunction;
import com.sap.conn.jco.JCoRecord;
import com.sap.conn.jco.JCoTable;
«ENDDEFINE»

«REM» ============================================================================================= «ENDREM»

«DEFINE PropertyChangeSupportMethods FOR Object-»
	/**
	 * @param listener
	 * @see java.beans.PropertyChangeSupport#addPropertyChangeListener(java.beans.PropertyChangeListener)
	 */
	public void addPropertyChangeListener(PropertyChangeListener listener) {
		_pcs.addPropertyChangeListener(listener);
	}

	/**
	 * @param propertyName
	 * @param listener
	 * @see java.beans.PropertyChangeSupport#addPropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener)
	 */
	public void addPropertyChangeListener(String propertyName, PropertyChangeListener listener) {
		_pcs.addPropertyChangeListener(propertyName, listener);
	}

	/**
	 * @return
	 * @see java.beans.PropertyChangeSupport#getPropertyChangeListeners()
	 */
	public PropertyChangeListener[] getPropertyChangeListeners() {
		return _pcs.getPropertyChangeListeners();
	}

	/**
	 * @param propertyName
	 * @return
	 * @see java.beans.PropertyChangeSupport#getPropertyChangeListeners(java.lang.String)
	 */
	public PropertyChangeListener[] getPropertyChangeListeners(String propertyName) {
		return _pcs.getPropertyChangeListeners(propertyName);
	}

	/**
	 * @param propertyName
	 * @return
	 * @see java.beans.PropertyChangeSupport#hasListeners(java.lang.String)
	 */
	public boolean hasListeners(String propertyName) {
		return _pcs.hasListeners(propertyName);
	}

	/**
	 * @param listener
	 * @see java.beans.PropertyChangeSupport#removePropertyChangeListener(java.beans.PropertyChangeListener)
	 */
	public void removePropertyChangeListener(PropertyChangeListener listener) {
		_pcs.removePropertyChangeListener(listener);
	}

	/**
	 * @param propertyName
	 * @param listener
	 * @see java.beans.PropertyChangeSupport#removePropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener)
	 */
	public void removePropertyChangeListener(String propertyName, PropertyChangeListener listener) {
		_pcs.removePropertyChangeListener(propertyName, listener);
	}
«ENDDEFINE»

«REM» ============================================================================================= «ENDREM»

«DEFINE StructureClass(String packageName) FOR Structure»
«FILE getFileName(packageName)» 
package «packageName»;
«EXPAND Imports FOR this»
/**
 * A class representing the SAP R/3 data structure «name».
 */
public class «className» {

	private PropertyChangeSupport _pcs;

«FOREACH fields AS f-»
	private «f.type» «f.attribute»;
«ENDFOREACH-»
	
	/**
	 * Default constructor to create an instance with initial values.
	 */
	public «className»() {
		_pcs = new PropertyChangeSupport(this);
	}

	/**
	 * Copy constructor to create an instance and copy the values from an existing record.
	 * @param source the {@link JCoRecord} to copy the values from
	 * @throws UnsupportedOperationException if any other structure is passed as a source record
	 */
	public «className»(JCoRecord source) throws UnsupportedOperationException {
		checkStructure(source);
		_pcs = new PropertyChangeSupport(this);
«FOREACH fields AS f-»
		this.«f.attribute» = source.get«f.type.toFirstUpper()»("«f.name»");
«ENDFOREACH-»
	}

	/**
	 * Copy the values into a target record.
	 * @param target the {@link JCoRecord} to copy the values to
	 * @throws UnsupportedOperationException if any other structure is passed as a target record
	 */
	public void toStructure(JCoRecord target) throws UnsupportedOperationException {
		checkStructure(target);
		target.clear();
«FOREACH fields AS f-»
		target.setValue("«f.name»", this.«f.attribute»);
«ENDFOREACH-»
	}

	/**
	 * Transfers the contents of a typed list to a {@link JCoTable}.
	 * @param source
	 * @param destination
	 */
	public static void toTable(List<«className»> source, JCoTable destination) {
		destination.deleteAllRows();
		for («className» entry: source) {
			destination.appendRow();
			entry.toStructure(destination);
		}
	}
	
	/**
	 * Transfers the contents of a {@link JCoTable} into a typed list.
	 * @param source
	 * @param destination
	 */
	public static List<«className»> fromTable(JCoTable source) {
		List<«className»> list = new ArrayList<«className»>();
		if (!source.isEmpty()) {
			source.firstRow();
			do {
				list.add(new «className»(source));
			} while (source.nextRow());
		}
		return list;
	}
	
	/**
	 * @throws UnsupportedOperationException if any structure other than «name» is passed
	 */
	private void checkStructure(JCoRecord structure) throws UnsupportedOperationException {
		final String structureName = structure.getMetaData().getName(); 
		if (!structureName.equals("«name»")) {
			throw new UnsupportedOperationException(
				MessageFormat.format("Unsupported structure {0} (expected «name»).", structureName));
		}
	}
	
«FOREACH fields AS f-»
	/**
	 * @return the «f.comment == null ? f.attribute : f.comment» («name»-«f.name»)
	 */
	public «f.type» get«f.attribute.toFirstUpper()»() {
		return this.«f.attribute»;
	}
	
	/**
	 * Changes the «f.comment == null ? f.attribute : f.comment» («name»-«f.name»).
	 * @param new«f.attribute.toFirstUpper()» the new «f.comment == null ? f.attribute : f.comment» to set
	 */
	public void set«f.attribute.toFirstUpper()»(«f.type» new«f.attribute.toFirstUpper()») {
		_pcs.firePropertyChange("«f.attribute»", this.«f.attribute», new«f.attribute.toFirstUpper()»);
		this.«f.attribute» = new«f.attribute.toFirstUpper()»;
	}
	
«ENDFOREACH-»
«EXPAND PropertyChangeSupportMethods FOR this»
}
«ENDFILE»
«ENDDEFINE»

«REM» ============================================================================================= «ENDREM»

«DEFINE FunctionModuleClasses(String packageName, String functionModuleName) FOR FunctionModuleMapping»
«ERROR "Abstract template called - should not happen."»
«ENDDEFINE»

«REM» ============================================================================================= «ENDREM»

«DEFINE FunctionModuleClasses(String packageName, String functionModuleName) FOR FunctionModulePOJOCallMapping»
«FILE getFileName(packageName)» 
package «packageName»;
«EXPAND Imports FOR this»
/**
 * A class to model a RFC call to «functionModuleName». Use the setters to prepare the importing parameters, 
 * then invoke {@link #execute(JCoDestination)} to execute the call. The attributes of this instance 
 * will be updated to reflect the data returned from the SAP R/3 system.
 * <blockquote><pre>
 * «className» call = new «className»();
 * call.setFoo(...);
 * call.execute(destination);
 * bar = call.getBar();
 * </pre></blockquote>
 */
public class «className» {

	private PropertyChangeSupport _pcs;

«FOREACH parameters AS p-»
	«EXPAND FunctionModulePOJOParameterAttribute FOR p-»
«ENDFOREACH-»
	
	/**
	 * Default constructor to create an instance with initial values.
	 */
	public «className»() {
		_pcs = new PropertyChangeSupport(this);
	}

«FOREACH parameters AS p-»
	/**
	 * @return the «p.comment == null ? p.attribute : p.comment» («p.name»)
	 */
	public «p.getJavaType()» get«p.attribute.toFirstUpper()»() {
		return this.«p.attribute»;
	}
	
	/**
	 * Changes the «p.comment == null ? p.attribute : p.comment» («p.name»).
	 * @param new«p.attribute.toFirstUpper()» the new «p.comment == null ? p.attribute : p.comment» to set
	 */
	public void set«p.attribute.toFirstUpper()»(«p.getJavaType()» new«p.attribute.toFirstUpper()») {
		_pcs.firePropertyChange("«p.attribute»", this.«p.attribute», new«p.attribute.toFirstUpper()»);
		this.«p.attribute» = new«p.attribute.toFirstUpper()»;
	}
	
«ENDFOREACH-»
	/**
	 * Executes the RFC call and updates the attributes accordingly.
	 * @param destination the RFC destination to use
	 * @throws JCoException
	 */
	public void execute(JCoDestination destination) throws JCoException {
		JCoFunction function = destination.getRepository().getFunction("«functionModuleName»");
«FOREACH parameters AS p-»
	«EXPAND FunctionModulePOJOParameterBeforeCall FOR p-»
«ENDFOREACH-»
		function.execute(destination);
«FOREACH parameters AS p-»
	«EXPAND FunctionModulePOJOParameterAfterCall FOR p-»
«ENDFOREACH-»
	}

«EXPAND PropertyChangeSupportMethods FOR this»
}
«ENDFILE»
«ENDDEFINE»

«REM» ============================================================================================= «ENDREM»

«DEFINE FunctionModuleClasses(String packageName, String functionModuleName) FOR FunctionModulePOJORequestResponseMapping»
«FILE getRequestFileName(packageName)» 
package «packageName»;
«EXPAND Imports FOR this»
/**
 * A class to model the input data of a RFC call to «functionModuleName». Use the setters to prepare 
 * the importing parameters, then invoke {@link #execute(JCoDestination)} to execute the call. This method
 * returns an instance that contains the data returned from the SAP R/3 system.
 * <blockquote><pre>
 * «requestClassName» request = new «requestClassName»();
 * request.setFoo(...);
 * «responseClassName» response = call.execute(destination);
 * bar = response.getBar();
 * </pre></blockquote>
 */
public class «requestClassName» {

	private PropertyChangeSupport _pcs;

«FOREACH requestParameters AS p-»
	«EXPAND FunctionModulePOJOParameterAttribute FOR p-»
«ENDFOREACH-»
	
	/**
	 * Default constructor to create an instance with initial values.
	 */
	public «requestClassName»() {
		_pcs = new PropertyChangeSupport(this);
	}
	
«FOREACH requestParameters AS p-»
	/**
	 * @return the «p.comment == null ? p.attribute : p.comment» («p.name»)
	 */
	public «p.getJavaType()» get«p.attribute.toFirstUpper()»() {
		return this.«p.attribute»;
	}
	
	/**
	 * Changes the «p.comment == null ? p.attribute : p.comment» («p.name»).
	 * @param new«p.attribute.toFirstUpper()» the new «p.comment == null ? p.attribute : p.comment» to set
	 */
	public void set«p.attribute.toFirstUpper()»(«p.getJavaType()» new«p.attribute.toFirstUpper()») {
		_pcs.firePropertyChange("«p.attribute»", this.«p.attribute», new«p.attribute.toFirstUpper()»);
		this.«p.attribute» = new«p.attribute.toFirstUpper()»;
	}
	
«ENDFOREACH-»
	/**
	 * Executes the RFC call and returns the response instance.
	 * @param destination the RFC destination to use
	 * @throws JCoException
	 */
	public «responseClassName» execute(JCoDestination destination) throws JCoException {
		JCoFunction function = destination.getRepository().getFunction("«functionModuleName»");
«FOREACH requestParameters AS p-»
	«EXPAND FunctionModulePOJOParameterBeforeCall FOR p-»
«ENDFOREACH-»
		function.execute(destination);
		«responseClassName» response = new «responseClassName»();
«FOREACH responseParameters AS p-»
	«EXPAND FunctionModulePOJOParameterAfterCallResponse FOR p-»
«ENDFOREACH-»
		return response;
	}

«EXPAND PropertyChangeSupportMethods FOR this»
}
«ENDFILE»
«REM» - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - «ENDREM»
«FILE getResponseFileName(packageName)» 
package «packageName»;
«EXPAND Imports FOR this»
/**
 * A class to model the output data of a RFC call to «functionModuleName». See {@link «requestClassName»}
 * for instructions on how to obtain an instance of this class.
 * @see «requestClassName»
 */
public class «responseClassName» {

	private PropertyChangeSupport _pcs;

«FOREACH responseParameters AS p-»
	«EXPAND FunctionModulePOJOParameterAttribute FOR p-»
«ENDFOREACH-»
	
	/**
	 * Default constructor to create an instance with initial values.
	 */
	public «responseClassName»() {
		_pcs = new PropertyChangeSupport(this);
	}
	
«FOREACH responseParameters AS p-»
	/**
	 * @return the «p.comment == null ? p.attribute : p.comment» («p.name»)
	 */
	public «p.getJavaType()» get«p.attribute.toFirstUpper()»() {
		return this.«p.attribute»;
	}
	
	/**
	 * Changes the «p.comment == null ? p.attribute : p.comment» («p.name»).
	 * @param new«p.attribute.toFirstUpper()» the new «p.comment == null ? p.attribute : p.comment» to set
	 */
	public void set«p.attribute.toFirstUpper()»(«p.getJavaType()» new«p.attribute.toFirstUpper()») {
		_pcs.firePropertyChange("«p.attribute»", this.«p.attribute», new«p.attribute.toFirstUpper()»);
		this.«p.attribute» = new«p.attribute.toFirstUpper()»;
	}
	
«ENDFOREACH-»
«EXPAND PropertyChangeSupportMethods FOR this»
}
«ENDFILE»
«ENDDEFINE»

«REM» ============================================================================================= «ENDREM»

«DEFINE FunctionModulePOJOParameterAttribute FOR FunctionModulePOJOParameterMapping»
«ERROR "Abstract template called - should not happen."»
«ENDDEFINE»

«DEFINE FunctionModulePOJOParameterAttribute FOR FunctionModulePOJOImportingParameter-»
«IF isTable-»
	private «getJavaType()» «attribute» = new ArrayList<«type»>();
«ELSE-»
	private «type» «attribute»;
«ENDIF-»
«ENDDEFINE»

«DEFINE FunctionModulePOJOParameterAttribute FOR FunctionModulePOJOExportingParameter-»
«IF isTable-»
	private «getJavaType()» «attribute» = new ArrayList<«type»>();
«ELSE-»
	private «type» «attribute»;
«ENDIF-»
«ENDDEFINE»

«DEFINE FunctionModulePOJOParameterAttribute FOR FunctionModulePOJOChangingParameter-»
«IF isTable-»
	private «getJavaType()» «attribute» = new ArrayList<«type»>();
«ELSE-»
	private «type» «attribute»;
«ENDIF-»
«ENDDEFINE»

«DEFINE FunctionModulePOJOParameterAttribute FOR FunctionModulePOJOTablesParameter-»
	private «getJavaType()» «attribute» = new ArrayList<«type»>();
«ENDDEFINE»

«REM» ============================================================================================= «ENDREM»

«DEFINE FunctionModulePOJOParameterBeforeCall FOR FunctionModulePOJOParameterMapping-»
«ENDDEFINE»

«DEFINE FunctionModulePOJOParameterBeforeCall FOR FunctionModulePOJOImportingParameter-»
«IF isTable-»
		«type».toTable(function.getImportParameterList().getTable("«name»"));
«ELSEIF isStructure-»
		«attribute».toStructure(«attribute», function.getImportParameterList().getStructure("«name»"));
«ELSE-»
		function.getImportParameterList().setValue("«name»", «attribute»);
«ENDIF-»
«ENDDEFINE»

«DEFINE FunctionModulePOJOParameterBeforeCall FOR FunctionModulePOJOChangingParameter-»
«IF isTable-»
		«type».toTable(function.getChangingParameterList().getTable("«name»"));
«ELSEIF isStructure-»
		«attribute».toStructure(«attribute», function.getChangingParameterList().getStructure("«name»"));
«ELSE-»
		function.getChangingParameterList().setValue("«name»", «attribute»);
«ENDIF-»
«ENDDEFINE»

«DEFINE FunctionModulePOJOParameterBeforeCall FOR FunctionModulePOJOTablesParameter-»
		«type».toTable(«attribute», function.getTableParameterList().getTable("«name»"));
«ENDDEFINE»

«REM» ============================================================================================= «ENDREM»

«DEFINE FunctionModulePOJOParameterAfterCall FOR FunctionModulePOJOParameterMapping-»
«ENDDEFINE»

«DEFINE FunctionModulePOJOParameterAfterCall FOR FunctionModulePOJOExportingParameter-»
«IF isTable-»
		«attribute» = «type».fromTable(function.getExportParameterList().getTable("«name»"));
«ELSEIF isStructure-»
		«attribute» = new «type»(function.getExportParameterList().getStructure("«name»"));
«ELSE-»
		«attribute» = function.getExportParameterList().getValue("«name»");
«ENDIF-»
«ENDDEFINE»

«DEFINE FunctionModulePOJOParameterAfterCall FOR FunctionModulePOJOChangingParameter-»
«IF isTable-»
		«attribute» = «type».fromTable(function.getChangingParameterList().getTable("«name»"));
«ELSEIF isStructure-»
		«attribute» = new «type»(function.getChangingParameterList().getStructure("«name»"));
«ELSE-»
		«attribute» = function.getChangingParameterList().getValue("«name»");
«ENDIF-»
«ENDDEFINE»

«DEFINE FunctionModulePOJOParameterAfterCall FOR FunctionModulePOJOTablesParameter-»
		«attribute» = «type».fromTable(function.getTableParameterList().getTable("«name»"));
«ENDDEFINE»

«REM» ============================================================================================= «ENDREM»

«DEFINE FunctionModulePOJOParameterAfterCallResponse FOR FunctionModulePOJOParameterMapping-»
«ENDDEFINE»

«DEFINE FunctionModulePOJOParameterAfterCallResponse FOR FunctionModulePOJOExportingParameter-»
«IF isTable-»
		response.set«attribute.toFirstUpper()»(«type».fromTable(function.getExportParameterList().getTable("«name»")));
«ELSEIF isStructure-»
		response.set«attribute.toFirstUpper()»(new «type»(function.getExportParameterList().getStructure("«name»")));
«ELSE-»
		response.set«attribute.toFirstUpper()»(function.getExportParameterList().getValue("«name»"));
«ENDIF-»
«ENDDEFINE»

«DEFINE FunctionModulePOJOParameterAfterCallResponse FOR FunctionModulePOJOChangingParameter-»
«IF isTable-»
		response.set«attribute.toFirstUpper()»(«type».fromTable(function.getChangingParameterList().getTable("«name»")));
«ELSEIF isStructure-»
		response.set«attribute.toFirstUpper()»(new «type»(function.getChangingParameterList().getStructure("«name»")));
«ELSE-»
		response.set«attribute.toFirstUpper()»(function.getChangingParameterList().getValue("«name»"));
«ENDIF-»
«ENDDEFINE»

«DEFINE FunctionModulePOJOParameterAfterCallResponse FOR FunctionModulePOJOTablesParameter-»
		response.set«attribute.toFirstUpper()»(«type».fromTable(function.getTableParameterList().getTable("«name»")));
«ENDDEFINE»

